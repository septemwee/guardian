import BarChatHeader from '@/components/barchat';
import NavChat from '@/components/navchat';
import React, { useState } from 'react';
import {
  FlatList,
  KeyboardAvoidingView,
  Platform,
  SafeAreaView,
  StatusBar,
  StyleSheet,
  Text,
  View,
} from 'react-native';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'other' | 'guardian_alert'; 
}

const TAB_BAR_HEIGHT = 0;

const Chatpage = () => {
  const [messageText, setMessageText] = useState('');
  const [messages, setMessages] = useState<Message[]>([]);

  const getGuardianResponse = (userMessage: string): { type: 'scam' | 'normal'; text: string } => {
    const lowerCaseMessage = userMessage.toLowerCase();
    
    const scamKeywords = [
      '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢', '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ', '‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•', '‡∏ü‡∏£‡∏µ', '‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•',
      '‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏¢', '‡πÅ‡∏≠‡∏î‡πÑ‡∏•‡∏ô‡πå', '‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå',
      '‡∏î‡πà‡∏ß‡∏ô!', '‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏°.', '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö',
      '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô', '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      '‡∏Å‡∏£‡∏°‡∏™‡∏£‡∏£‡∏û‡∏≤‡∏Å‡∏£', '‡∏ï‡∏≥‡∏£‡∏ß‡∏à', '‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡πÑ‡∏ó‡∏¢', '‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ï‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á',
      '‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡∏π‡πâ', '‡∏™‡∏¥‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠', '‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ï‡πà‡∏≥', '‡∏•‡∏á‡∏ó‡∏∏‡∏ô', '‡∏ú‡∏•‡∏ï‡∏≠‡∏ö‡πÅ‡∏ó‡∏ô‡∏™‡∏π‡∏á',
      '‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°',
      '.xyz', '.club', '.cc', '.top', '.live', 'bit.ly', 'shorturl.at'
    ];

    const isScam = scamKeywords.some(keyword => lowerCaseMessage.includes(keyword));

    if (isScam) {
      return {
        type: 'scam',
        text: 'üö® TrueGuardian ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏à‡∏â‡∏≤‡∏ä‡∏µ‡∏û! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå, ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î',
      };
    }

    if (lowerCaseMessage.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || lowerCaseMessage.includes('‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ')) {
      return { type: 'normal', text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä' };
    } 
    
    if (lowerCaseMessage.includes('‡∏™‡∏ö‡∏≤‡∏¢‡∏î‡∏µ‡πÑ‡∏´‡∏°')) {
      return { type: 'normal', text: '‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô AI ‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏•‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏ï‡πà‡∏Å‡πá‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞!' };
    }
    
    return { type: 'normal', text: '‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' };
  };

  const handleSendMessage = () => {
    if (messageText.trim()) {
      const userMessageText = messageText;
      const userMessage: Message = {
        id: Date.now().toString(),
        text: userMessageText,
        sender: 'user',
      };

      setMessages(prevMessages => [userMessage, ...prevMessages]);
      setMessageText('');

      setTimeout(() => {
        const response = getGuardianResponse(userMessageText); 
        
        const responseMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: response.text,
          sender: response.type === 'scam' ? 'guardian_alert' : 'other',
        };

        setMessages(prevMessages => [responseMessage, ...prevMessages]);
      }, 1000);
    }
  };

  const renderMessage = ({ item }: { item: Message }) => (
    <View
      style={
        item.sender === 'user'
          ? styles.userMessageContainer
          : item.sender === 'guardian_alert'
            ? styles.alertMessageContainer 
            : styles.otherMessageContainer
      }
    >
      <Text style={styles.messageText}>{item.text}</Text>
    </View>
  );

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        <BarChatHeader />
        <KeyboardAvoidingView
          style={styles.keyboardAvoidingView}
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          keyboardVerticalOffset={TAB_BAR_HEIGHT}
        >
          <FlatList
            data={messages}
            renderItem={renderMessage}
            keyExtractor={item => item.id}
            contentContainerStyle={styles.chatContent}
            inverted={true}
          />
          <NavChat
            messageText={messageText}
            setMessageText={setMessageText}
            onSend={handleSendMessage}
          />
        </KeyboardAvoidingView>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#F5F5F5',
    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,
  },
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  keyboardAvoidingView: {
    flex: 1,
  },
  chatContent: {
    paddingTop: 20,
    paddingBottom: 20,
    justifyContent: 'flex-end',
    flexGrow: 1,
  },
  userMessageContainer: {
    backgroundColor: '#DCF8C6',
    alignSelf: 'flex-end',
    margin: 8,
    padding: 12,
    borderRadius: 15,
    maxWidth: '80%',
  },
  otherMessageContainer: {
    backgroundColor: 'white',
    alignSelf: 'flex-start',
    margin: 8,
    padding: 12,
    borderRadius: 15,
    maxWidth: '80%',
  },
  // *** 5. ‡πÄ‡∏û‡∏¥‡πà‡∏° Style ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ***
  alertMessageContainer: {
    backgroundColor: '#FFF4E5', // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏ó‡∏ô‡∏™‡πâ‡∏°‡∏≠‡πà‡∏≠‡∏ô
    borderColor: '#FFB74D', // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏ö‡πÇ‡∏ó‡∏ô‡∏™‡πâ‡∏°
    borderWidth: 1,
    alignSelf: 'center', // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠
    marginVertical: 10,
    marginHorizontal: '5%',
    padding: 12,
    borderRadius: 15,
    maxWidth: '90%', // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
  },
  messageText: {
    fontSize: 16,
  },
});

export default Chatpage;